unit Produto;

interface

uses
  System.SysUtils, System.Classes, Data.DB, FireDAC.Comp.Client;

type
  TProduto = class
  private
    FIdProduto: Integer;
    FCodEAN: String;
    FDescricao: String;
    FIdDepto: Integer;
    FQtdEstqAtual: Double;
    FNcm: String;
    FCfopEntrada: String;
    FCfopSaida: String;
    FValorCusto: Currency;
    FValorVenda: Currency;
    FMargemLucro: Double;
    FUnidadeMedida: String;
    FObservacao: String;
    FDataInclusao: TDateTime;
    FAtivo: Boolean;

  public
    property IdProduto: Integer read FIdProduto write FIdProduto;
    property CodEAN: String read FCodEAN write FCodEAN;
    property Descricao: String read FDescricao write FDescricao;
    property IdDepto: Integer read FIdDepto write FIdDepto;
    property QtdEstqAtual: Double read FQtdEstqAtual write FQtdEstqAtual;
    property Ncm: String read FNcm write FNcm;
    property CfopEntrada: String read FCfopEntrada write FCfopEntrada;
    property CfopSaida: String read FCfopSaida write FCfopSaida;
    property ValorCusto: Currency read FValorCusto write FValorCusto;
    property ValorVenda: Currency read FValorVenda write FValorVenda;
    property MargemLucro: Double read FMargemLucro write FMargemLucro;
    property UnidadeMedida: String read FUnidadeMedida write FUnidadeMedida;
    property Observacao: String read FObservacao write FObservacao;
    property DataInclusao: TDateTime read FDataInclusao;
    property Ativo: Boolean read FAtivo;

    function GravarProduto(): Boolean;
    function ExcluirProduto(aQuery: TFDQuery): Boolean;
    function BuscarProdutoPorEAN(CodEan: String): Boolean;
  end;

implementation

uses Unit_dmPrincipal;


function TProduto.GravarProduto(): Boolean;
begin
  try
    dmPrincipal.sqlGravarProduto.Params[1].Value := FCodEAN;
    dmPrincipal.sqlGravarProduto.Params[2].Value := FDescricao;
    dmPrincipal.sqlGravarProduto.Params[3].Value := FIdDepto;
    dmPrincipal.sqlGravarProduto.Params[4].Value := FNcm;
    dmPrincipal.sqlGravarProduto.Params[5].Value := FCfopEntrada;
    dmPrincipal.sqlGravarProduto.Params[6].Value := FCfopSaida;
    dmPrincipal.sqlGravarProduto.Params[7].Value := FValorCusto;
    dmPrincipal.sqlGravarProduto.Params[8].Value := FValorVenda;
    dmPrincipal.sqlGravarProduto.Params[9].Value := FUnidadeMedida;
    dmPrincipal.sqlGravarProduto.Params[10].Value := FQtdEstqAtual;
    dmPrincipal.sqlGravarProduto.Params[11].Value := FObservacao;
    dmPrincipal.sqlGravarProduto.Params[12].Value := FMargemLucro;

    dmPrincipal.sqlGravarProduto.ExecProc;
    Result := true;
  except
    on E: Exception do
      raise Exception.Create('Erro ao gravar produto: ' + E.Message);
  end;
end;

function TProduto.ExcluirProduto(aQuery: TFDQuery): Boolean;
begin
  try
    aQuery.SQL.Text := 'EXEC excluir_produto :codEAN';
    aQuery.Params[0].Value := FCodEAN;
    aQuery.ExecSQL;
    Result := aQuery.RowsAffected > 0;
  except
    on E: Exception do
      raise Exception.Create('Erro ao excluir produto: ' + E.Message);
  end;
end;

function TProduto.BuscarProdutoPorEAN(CodEan: String): Boolean;
begin
  try
      dmPrincipal.cdsCarregarProduto.Close;
      dmPrincipal.cdsCarregarProduto.Params[1].Value:= CodEan;
      dmPrincipal.cdsCarregarProduto.Open;

      if dmPrincipal.cdsCarregarProduto.RecordCount = 0 then
      begin
        Result:= false;
        exit;
      end;
      FIdProduto:= dmPrincipal.cdsCarregarProdutoID_PRODUTO.AsInteger;
      FDescricao := dmPrincipal.cdsCarregarProdutoDS_PRODUTO.AsString;
      FIdDepto := dmPrincipal.cdsCarregarProdutoID_DEPTO.AsInteger;
      FQtdEstqAtual := dmPrincipal.cdsCarregarProdutoQTD_ESTQ_ATUAL.AsFloat;
      FNcm := dmPrincipal.cdsCarregarProdutoDS_NCM.AsString;
      FCfopEntrada := dmPrincipal.cdsCarregarProdutoCD_CFOP_ENTRADA.AsString;
      FCfopSaida := dmPrincipal.cdsCarregarProdutoCD_CFOP_SAIDA.AsString;
      FValorCusto := dmPrincipal.cdsCarregarProdutoVLR_CUSTO.AsCurrency;
      FValorVenda := dmPrincipal.cdsCarregarProdutoVLR_VENDA.AsCurrency;
      FMargemLucro := dmPrincipal.cdsCarregarProdutoMARGEM_LUCRO.AsFloat;
      FUnidadeMedida := dmPrincipal.cdsCarregarProdutoDS_UNIDADE_MEDIDA.AsString;
      FObservacao := dmPrincipal.cdsCarregarProdutoDS_OBSERVACAO.AsString;
      FDataInclusao := dmPrincipal.cdsCarregarProdutoDT_INCLUSAO.AsDateTime;
      Result := True;

  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao buscar produto: ' + E.Message);
      result:= false
    end;
  end;
end;

end.
